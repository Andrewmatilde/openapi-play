/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfContainersInnerAllOfSecurityContextAllOfAppArmorProfile from './PodSpecAllOfContainersInnerAllOfSecurityContextAllOfAppArmorProfile';
import PodSpecAllOfContainersInnerAllOfSecurityContextAllOfCapabilities from './PodSpecAllOfContainersInnerAllOfSecurityContextAllOfCapabilities';
import PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeLinuxOptions from './PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeLinuxOptions';
import PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeccompProfile from './PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeccompProfile';
import PodSpecAllOfContainersInnerAllOfSecurityContextAllOfWindowsOptions from './PodSpecAllOfContainersInnerAllOfSecurityContextAllOfWindowsOptions';

/**
 * The PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext model module.
 * @module model/PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext
 * @version 1.0.0
 */
class PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext {
    /**
     * Constructs a new <code>PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext</code>.
     * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
     * @alias module:model/PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext
     */
    constructor() { 
        
        PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext} The populated <code>PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext();

            if (data.hasOwnProperty('allowPrivilegeEscalation')) {
                obj['allowPrivilegeEscalation'] = ApiClient.convertToType(data['allowPrivilegeEscalation'], 'Boolean');
            }
            if (data.hasOwnProperty('appArmorProfile')) {
                obj['appArmorProfile'] = PodSpecAllOfContainersInnerAllOfSecurityContextAllOfAppArmorProfile.constructFromObject(data['appArmorProfile']);
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = PodSpecAllOfContainersInnerAllOfSecurityContextAllOfCapabilities.constructFromObject(data['capabilities']);
            }
            if (data.hasOwnProperty('privileged')) {
                obj['privileged'] = ApiClient.convertToType(data['privileged'], 'Boolean');
            }
            if (data.hasOwnProperty('procMount')) {
                obj['procMount'] = ApiClient.convertToType(data['procMount'], 'String');
            }
            if (data.hasOwnProperty('readOnlyRootFilesystem')) {
                obj['readOnlyRootFilesystem'] = ApiClient.convertToType(data['readOnlyRootFilesystem'], 'Boolean');
            }
            if (data.hasOwnProperty('runAsGroup')) {
                obj['runAsGroup'] = ApiClient.convertToType(data['runAsGroup'], 'Number');
            }
            if (data.hasOwnProperty('runAsNonRoot')) {
                obj['runAsNonRoot'] = ApiClient.convertToType(data['runAsNonRoot'], 'Boolean');
            }
            if (data.hasOwnProperty('runAsUser')) {
                obj['runAsUser'] = ApiClient.convertToType(data['runAsUser'], 'Number');
            }
            if (data.hasOwnProperty('seLinuxOptions')) {
                obj['seLinuxOptions'] = PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeLinuxOptions.constructFromObject(data['seLinuxOptions']);
            }
            if (data.hasOwnProperty('seccompProfile')) {
                obj['seccompProfile'] = PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeccompProfile.constructFromObject(data['seccompProfile']);
            }
            if (data.hasOwnProperty('windowsOptions')) {
                obj['windowsOptions'] = PodSpecAllOfContainersInnerAllOfSecurityContextAllOfWindowsOptions.constructFromObject(data['windowsOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appArmorProfile`
        if (data['appArmorProfile']) { // data not null
          PodSpecAllOfContainersInnerAllOfSecurityContextAllOfAppArmorProfile.validateJSON(data['appArmorProfile']);
        }
        // validate the optional field `capabilities`
        if (data['capabilities']) { // data not null
          PodSpecAllOfContainersInnerAllOfSecurityContextAllOfCapabilities.validateJSON(data['capabilities']);
        }
        // ensure the json data is a string
        if (data['procMount'] && !(typeof data['procMount'] === 'string' || data['procMount'] instanceof String)) {
            throw new Error("Expected the field `procMount` to be a primitive type in the JSON string but got " + data['procMount']);
        }
        // validate the optional field `seLinuxOptions`
        if (data['seLinuxOptions']) { // data not null
          PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeLinuxOptions.validateJSON(data['seLinuxOptions']);
        }
        // validate the optional field `seccompProfile`
        if (data['seccompProfile']) { // data not null
          PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeccompProfile.validateJSON(data['seccompProfile']);
        }
        // validate the optional field `windowsOptions`
        if (data['windowsOptions']) { // data not null
          PodSpecAllOfContainersInnerAllOfSecurityContextAllOfWindowsOptions.validateJSON(data['windowsOptions']);
        }

        return true;
    }


}



/**
 * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
 * @member {Boolean} allowPrivilegeEscalation
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['allowPrivilegeEscalation'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfSecurityContextAllOfAppArmorProfile} appArmorProfile
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['appArmorProfile'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfSecurityContextAllOfCapabilities} capabilities
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['capabilities'] = undefined;

/**
 * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
 * @member {Boolean} privileged
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['privileged'] = undefined;

/**
 * procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
 * @member {String} procMount
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['procMount'] = undefined;

/**
 * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
 * @member {Boolean} readOnlyRootFilesystem
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['readOnlyRootFilesystem'] = undefined;

/**
 * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsGroup
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['runAsGroup'] = undefined;

/**
 * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 * @member {Boolean} runAsNonRoot
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['runAsNonRoot'] = undefined;

/**
 * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsUser
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['runAsUser'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeLinuxOptions} seLinuxOptions
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['seLinuxOptions'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfSecurityContextAllOfSeccompProfile} seccompProfile
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['seccompProfile'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfSecurityContextAllOfWindowsOptions} windowsOptions
 */
PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext.prototype['windowsOptions'] = undefined;






export default PodSpecAllOfEphemeralContainersInnerAllOfSecurityContext;

