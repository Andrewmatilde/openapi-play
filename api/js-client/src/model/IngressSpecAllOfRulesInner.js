/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IngressSpecAllOfRulesInnerAllOfHttp from './IngressSpecAllOfRulesInnerAllOfHttp';

/**
 * The IngressSpecAllOfRulesInner model module.
 * @module model/IngressSpecAllOfRulesInner
 * @version 1.0.0
 */
class IngressSpecAllOfRulesInner {
    /**
     * Constructs a new <code>IngressSpecAllOfRulesInner</code>.
     * @alias module:model/IngressSpecAllOfRulesInner
     */
    constructor() { 
        
        IngressSpecAllOfRulesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IngressSpecAllOfRulesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IngressSpecAllOfRulesInner} obj Optional instance to populate.
     * @return {module:model/IngressSpecAllOfRulesInner} The populated <code>IngressSpecAllOfRulesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IngressSpecAllOfRulesInner();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('http')) {
                obj['http'] = IngressSpecAllOfRulesInnerAllOfHttp.constructFromObject(data['http']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IngressSpecAllOfRulesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IngressSpecAllOfRulesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // validate the optional field `http`
        if (data['http']) { // data not null
          IngressSpecAllOfRulesInnerAllOfHttp.validateJSON(data['http']);
        }

        return true;
    }


}



/**
 * host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to    the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed.    Currently the port of an Ingress is implicitly :80 for http and    :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.  host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
 * @member {String} host
 */
IngressSpecAllOfRulesInner.prototype['host'] = undefined;

/**
 * @member {module:model/IngressSpecAllOfRulesInnerAllOfHttp} http
 */
IngressSpecAllOfRulesInner.prototype['http'] = undefined;






export default IngressSpecAllOfRulesInner;

