/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfCephfsAllOfSecretRef from './PodSpecAllOfVolumesInnerAllOfCephfsAllOfSecretRef';

/**
 * The PodSpecAllOfVolumesInnerAllOfCephfs model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfCephfs
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfCephfs {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfCephfs</code>.
     * cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime. Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfCephfs
     * @param monitors {Array.<String>} monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    constructor(monitors) { 
        
        PodSpecAllOfVolumesInnerAllOfCephfs.initialize(this, monitors);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, monitors) { 
        obj['monitors'] = monitors;
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfCephfs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfCephfs} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfCephfs} The populated <code>PodSpecAllOfVolumesInnerAllOfCephfs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfCephfs();

            if (data.hasOwnProperty('monitors')) {
                obj['monitors'] = ApiClient.convertToType(data['monitors'], ['String']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('secretFile')) {
                obj['secretFile'] = ApiClient.convertToType(data['secretFile'], 'String');
            }
            if (data.hasOwnProperty('secretRef')) {
                obj['secretRef'] = PodSpecAllOfVolumesInnerAllOfCephfsAllOfSecretRef.constructFromObject(data['secretRef']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfCephfs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfCephfs</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfCephfs.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['monitors'])) {
            throw new Error("Expected the field `monitors` to be an array in the JSON data but got " + data['monitors']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['secretFile'] && !(typeof data['secretFile'] === 'string' || data['secretFile'] instanceof String)) {
            throw new Error("Expected the field `secretFile` to be a primitive type in the JSON string but got " + data['secretFile']);
        }
        // validate the optional field `secretRef`
        if (data['secretRef']) { // data not null
          PodSpecAllOfVolumesInnerAllOfCephfsAllOfSecretRef.validateJSON(data['secretRef']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfCephfs.RequiredProperties = ["monitors"];

/**
 * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
 * @member {Array.<String>} monitors
 */
PodSpecAllOfVolumesInnerAllOfCephfs.prototype['monitors'] = undefined;

/**
 * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
 * @member {String} path
 */
PodSpecAllOfVolumesInnerAllOfCephfs.prototype['path'] = undefined;

/**
 * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
 * @member {Boolean} readOnly
 */
PodSpecAllOfVolumesInnerAllOfCephfs.prototype['readOnly'] = undefined;

/**
 * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
 * @member {String} secretFile
 */
PodSpecAllOfVolumesInnerAllOfCephfs.prototype['secretFile'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfCephfsAllOfSecretRef} secretRef
 */
PodSpecAllOfVolumesInnerAllOfCephfs.prototype['secretRef'] = undefined;

/**
 * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
 * @member {String} user
 */
PodSpecAllOfVolumesInnerAllOfCephfs.prototype['user'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfCephfs;

