/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodSpecAllOfVolumesInnerAllOfAzureDisk model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfAzureDisk
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfAzureDisk {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfAzureDisk</code>.
     * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type are redirected to the disk.csi.azure.com CSI driver.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfAzureDisk
     * @param diskName {String} diskName is the Name of the data disk in the blob storage
     * @param diskURI {String} diskURI is the URI of data disk in the blob storage
     */
    constructor(diskName, diskURI) { 
        
        PodSpecAllOfVolumesInnerAllOfAzureDisk.initialize(this, diskName, diskURI);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, diskName, diskURI) { 
        obj['cachingMode'] = 'ReadWrite';
        obj['diskName'] = diskName || '';
        obj['diskURI'] = diskURI || '';
        obj['fsType'] = 'ext4';
        obj['kind'] = 'Shared';
        obj['readOnly'] = false;
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfAzureDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfAzureDisk} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfAzureDisk} The populated <code>PodSpecAllOfVolumesInnerAllOfAzureDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfAzureDisk();

            if (data.hasOwnProperty('cachingMode')) {
                obj['cachingMode'] = ApiClient.convertToType(data['cachingMode'], 'String');
            }
            if (data.hasOwnProperty('diskName')) {
                obj['diskName'] = ApiClient.convertToType(data['diskName'], 'String');
            }
            if (data.hasOwnProperty('diskURI')) {
                obj['diskURI'] = ApiClient.convertToType(data['diskURI'], 'String');
            }
            if (data.hasOwnProperty('fsType')) {
                obj['fsType'] = ApiClient.convertToType(data['fsType'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfAzureDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfAzureDisk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfAzureDisk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cachingMode'] && !(typeof data['cachingMode'] === 'string' || data['cachingMode'] instanceof String)) {
            throw new Error("Expected the field `cachingMode` to be a primitive type in the JSON string but got " + data['cachingMode']);
        }
        // ensure the json data is a string
        if (data['diskName'] && !(typeof data['diskName'] === 'string' || data['diskName'] instanceof String)) {
            throw new Error("Expected the field `diskName` to be a primitive type in the JSON string but got " + data['diskName']);
        }
        // ensure the json data is a string
        if (data['diskURI'] && !(typeof data['diskURI'] === 'string' || data['diskURI'] instanceof String)) {
            throw new Error("Expected the field `diskURI` to be a primitive type in the JSON string but got " + data['diskURI']);
        }
        // ensure the json data is a string
        if (data['fsType'] && !(typeof data['fsType'] === 'string' || data['fsType'] instanceof String)) {
            throw new Error("Expected the field `fsType` to be a primitive type in the JSON string but got " + data['fsType']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfAzureDisk.RequiredProperties = ["diskName", "diskURI"];

/**
 * cachingMode is the Host Caching mode: None, Read Only, Read Write.
 * @member {String} cachingMode
 * @default 'ReadWrite'
 */
PodSpecAllOfVolumesInnerAllOfAzureDisk.prototype['cachingMode'] = 'ReadWrite';

/**
 * diskName is the Name of the data disk in the blob storage
 * @member {String} diskName
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfAzureDisk.prototype['diskName'] = '';

/**
 * diskURI is the URI of data disk in the blob storage
 * @member {String} diskURI
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfAzureDisk.prototype['diskURI'] = '';

/**
 * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
 * @member {String} fsType
 * @default 'ext4'
 */
PodSpecAllOfVolumesInnerAllOfAzureDisk.prototype['fsType'] = 'ext4';

/**
 * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
 * @member {String} kind
 * @default 'Shared'
 */
PodSpecAllOfVolumesInnerAllOfAzureDisk.prototype['kind'] = 'Shared';

/**
 * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
 * @member {Boolean} readOnly
 * @default false
 */
PodSpecAllOfVolumesInnerAllOfAzureDisk.prototype['readOnly'] = false;






export default PodSpecAllOfVolumesInnerAllOfAzureDisk;

