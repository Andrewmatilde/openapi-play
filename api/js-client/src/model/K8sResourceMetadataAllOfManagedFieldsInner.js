/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The K8sResourceMetadataAllOfManagedFieldsInner model module.
 * @module model/K8sResourceMetadataAllOfManagedFieldsInner
 * @version 1.0.0
 */
class K8sResourceMetadataAllOfManagedFieldsInner {
    /**
     * Constructs a new <code>K8sResourceMetadataAllOfManagedFieldsInner</code>.
     * @alias module:model/K8sResourceMetadataAllOfManagedFieldsInner
     */
    constructor() { 
        
        K8sResourceMetadataAllOfManagedFieldsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>K8sResourceMetadataAllOfManagedFieldsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/K8sResourceMetadataAllOfManagedFieldsInner} obj Optional instance to populate.
     * @return {module:model/K8sResourceMetadataAllOfManagedFieldsInner} The populated <code>K8sResourceMetadataAllOfManagedFieldsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new K8sResourceMetadataAllOfManagedFieldsInner();

            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
            if (data.hasOwnProperty('fieldsType')) {
                obj['fieldsType'] = ApiClient.convertToType(data['fieldsType'], 'String');
            }
            if (data.hasOwnProperty('fieldsV1')) {
                obj['fieldsV1'] = ApiClient.convertToType(data['fieldsV1'], Object);
            }
            if (data.hasOwnProperty('manager')) {
                obj['manager'] = ApiClient.convertToType(data['manager'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('subresource')) {
                obj['subresource'] = ApiClient.convertToType(data['subresource'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>K8sResourceMetadataAllOfManagedFieldsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>K8sResourceMetadataAllOfManagedFieldsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiVersion'] && !(typeof data['apiVersion'] === 'string' || data['apiVersion'] instanceof String)) {
            throw new Error("Expected the field `apiVersion` to be a primitive type in the JSON string but got " + data['apiVersion']);
        }
        // ensure the json data is a string
        if (data['fieldsType'] && !(typeof data['fieldsType'] === 'string' || data['fieldsType'] instanceof String)) {
            throw new Error("Expected the field `fieldsType` to be a primitive type in the JSON string but got " + data['fieldsType']);
        }
        // ensure the json data is a string
        if (data['manager'] && !(typeof data['manager'] === 'string' || data['manager'] instanceof String)) {
            throw new Error("Expected the field `manager` to be a primitive type in the JSON string but got " + data['manager']);
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['subresource'] && !(typeof data['subresource'] === 'string' || data['subresource'] instanceof String)) {
            throw new Error("Expected the field `subresource` to be a primitive type in the JSON string but got " + data['subresource']);
        }

        return true;
    }


}



/**
 * APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
 * @member {String} apiVersion
 */
K8sResourceMetadataAllOfManagedFieldsInner.prototype['apiVersion'] = undefined;

/**
 * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
 * @member {String} fieldsType
 */
K8sResourceMetadataAllOfManagedFieldsInner.prototype['fieldsType'] = undefined;

/**
 * FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.
 * @member {Object} fieldsV1
 */
K8sResourceMetadataAllOfManagedFieldsInner.prototype['fieldsV1'] = undefined;

/**
 * Manager is an identifier of the workflow managing these fields.
 * @member {String} manager
 */
K8sResourceMetadataAllOfManagedFieldsInner.prototype['manager'] = undefined;

/**
 * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
 * @member {String} operation
 */
K8sResourceMetadataAllOfManagedFieldsInner.prototype['operation'] = undefined;

/**
 * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
 * @member {String} subresource
 */
K8sResourceMetadataAllOfManagedFieldsInner.prototype['subresource'] = undefined;

/**
 * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
 * @member {Date} time
 */
K8sResourceMetadataAllOfManagedFieldsInner.prototype['time'] = undefined;






export default K8sResourceMetadataAllOfManagedFieldsInner;

