/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfLabelSelector from './PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfLabelSelector';
import PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfNamespaceSelector from './PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfNamespaceSelector';

/**
 * The PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm model module.
 * @module model/PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm
 * @version 1.0.0
 */
class PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm {
    /**
     * Constructs a new <code>PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm</code>.
     * Required. A pod affinity term, associated with the corresponding weight.
     * @alias module:model/PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm
     * @param topologyKey {String} This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
     */
    constructor(topologyKey) { 
        
        PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.initialize(this, topologyKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, topologyKey) { 
        obj['topologyKey'] = topologyKey || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm} The populated <code>PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm();

            if (data.hasOwnProperty('labelSelector')) {
                obj['labelSelector'] = PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfLabelSelector.constructFromObject(data['labelSelector']);
            }
            if (data.hasOwnProperty('matchLabelKeys')) {
                obj['matchLabelKeys'] = ApiClient.convertToType(data['matchLabelKeys'], ['String']);
            }
            if (data.hasOwnProperty('mismatchLabelKeys')) {
                obj['mismatchLabelKeys'] = ApiClient.convertToType(data['mismatchLabelKeys'], ['String']);
            }
            if (data.hasOwnProperty('namespaceSelector')) {
                obj['namespaceSelector'] = PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfNamespaceSelector.constructFromObject(data['namespaceSelector']);
            }
            if (data.hasOwnProperty('namespaces')) {
                obj['namespaces'] = ApiClient.convertToType(data['namespaces'], ['String']);
            }
            if (data.hasOwnProperty('topologyKey')) {
                obj['topologyKey'] = ApiClient.convertToType(data['topologyKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `labelSelector`
        if (data['labelSelector']) { // data not null
          PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfLabelSelector.validateJSON(data['labelSelector']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['matchLabelKeys'])) {
            throw new Error("Expected the field `matchLabelKeys` to be an array in the JSON data but got " + data['matchLabelKeys']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mismatchLabelKeys'])) {
            throw new Error("Expected the field `mismatchLabelKeys` to be an array in the JSON data but got " + data['mismatchLabelKeys']);
        }
        // validate the optional field `namespaceSelector`
        if (data['namespaceSelector']) { // data not null
          PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfNamespaceSelector.validateJSON(data['namespaceSelector']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['namespaces'])) {
            throw new Error("Expected the field `namespaces` to be an array in the JSON data but got " + data['namespaces']);
        }
        // ensure the json data is a string
        if (data['topologyKey'] && !(typeof data['topologyKey'] === 'string' || data['topologyKey'] instanceof String)) {
            throw new Error("Expected the field `topologyKey` to be a primitive type in the JSON string but got " + data['topologyKey']);
        }

        return true;
    }


}

PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.RequiredProperties = ["topologyKey"];

/**
 * @member {module:model/PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfLabelSelector} labelSelector
 */
PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.prototype['labelSelector'] = undefined;

/**
 * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.
 * @member {Array.<String>} matchLabelKeys
 */
PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.prototype['matchLabelKeys'] = undefined;

/**
 * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
 * @member {Array.<String>} mismatchLabelKeys
 */
PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.prototype['mismatchLabelKeys'] = undefined;

/**
 * @member {module:model/PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTermAllOfNamespaceSelector} namespaceSelector
 */
PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.prototype['namespaceSelector'] = undefined;

/**
 * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".
 * @member {Array.<String>} namespaces
 */
PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.prototype['namespaces'] = undefined;

/**
 * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
 * @member {String} topologyKey
 * @default ''
 */
PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm.prototype['topologyKey'] = '';






export default PodSpecAllOfAffinityAllOfPodAffinityAllOfPreferredDuringSchedulingIgnoredDuringExecutionInnerAllOfPodAffinityTerm;

