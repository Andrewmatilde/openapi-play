/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfSecurityContextAllOfAppArmorProfile from './PodSpecAllOfSecurityContextAllOfAppArmorProfile';
import PodSpecAllOfSecurityContextAllOfSeLinuxOptions from './PodSpecAllOfSecurityContextAllOfSeLinuxOptions';
import PodSpecAllOfSecurityContextAllOfSeccompProfile from './PodSpecAllOfSecurityContextAllOfSeccompProfile';
import PodSpecAllOfSecurityContextAllOfSysctlsInner from './PodSpecAllOfSecurityContextAllOfSysctlsInner';
import PodSpecAllOfSecurityContextAllOfWindowsOptions from './PodSpecAllOfSecurityContextAllOfWindowsOptions';

/**
 * The PodSpecAllOfSecurityContext model module.
 * @module model/PodSpecAllOfSecurityContext
 * @version 1.0.0
 */
class PodSpecAllOfSecurityContext {
    /**
     * Constructs a new <code>PodSpecAllOfSecurityContext</code>.
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
     * @alias module:model/PodSpecAllOfSecurityContext
     */
    constructor() { 
        
        PodSpecAllOfSecurityContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodSpecAllOfSecurityContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfSecurityContext} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfSecurityContext} The populated <code>PodSpecAllOfSecurityContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfSecurityContext();

            if (data.hasOwnProperty('appArmorProfile')) {
                obj['appArmorProfile'] = PodSpecAllOfSecurityContextAllOfAppArmorProfile.constructFromObject(data['appArmorProfile']);
            }
            if (data.hasOwnProperty('fsGroup')) {
                obj['fsGroup'] = ApiClient.convertToType(data['fsGroup'], 'Number');
            }
            if (data.hasOwnProperty('fsGroupChangePolicy')) {
                obj['fsGroupChangePolicy'] = ApiClient.convertToType(data['fsGroupChangePolicy'], 'String');
            }
            if (data.hasOwnProperty('runAsGroup')) {
                obj['runAsGroup'] = ApiClient.convertToType(data['runAsGroup'], 'Number');
            }
            if (data.hasOwnProperty('runAsNonRoot')) {
                obj['runAsNonRoot'] = ApiClient.convertToType(data['runAsNonRoot'], 'Boolean');
            }
            if (data.hasOwnProperty('runAsUser')) {
                obj['runAsUser'] = ApiClient.convertToType(data['runAsUser'], 'Number');
            }
            if (data.hasOwnProperty('seLinuxChangePolicy')) {
                obj['seLinuxChangePolicy'] = ApiClient.convertToType(data['seLinuxChangePolicy'], 'String');
            }
            if (data.hasOwnProperty('seLinuxOptions')) {
                obj['seLinuxOptions'] = PodSpecAllOfSecurityContextAllOfSeLinuxOptions.constructFromObject(data['seLinuxOptions']);
            }
            if (data.hasOwnProperty('seccompProfile')) {
                obj['seccompProfile'] = PodSpecAllOfSecurityContextAllOfSeccompProfile.constructFromObject(data['seccompProfile']);
            }
            if (data.hasOwnProperty('supplementalGroups')) {
                obj['supplementalGroups'] = ApiClient.convertToType(data['supplementalGroups'], ['Number']);
            }
            if (data.hasOwnProperty('supplementalGroupsPolicy')) {
                obj['supplementalGroupsPolicy'] = ApiClient.convertToType(data['supplementalGroupsPolicy'], 'String');
            }
            if (data.hasOwnProperty('sysctls')) {
                obj['sysctls'] = ApiClient.convertToType(data['sysctls'], [PodSpecAllOfSecurityContextAllOfSysctlsInner]);
            }
            if (data.hasOwnProperty('windowsOptions')) {
                obj['windowsOptions'] = PodSpecAllOfSecurityContextAllOfWindowsOptions.constructFromObject(data['windowsOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfSecurityContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfSecurityContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appArmorProfile`
        if (data['appArmorProfile']) { // data not null
          PodSpecAllOfSecurityContextAllOfAppArmorProfile.validateJSON(data['appArmorProfile']);
        }
        // ensure the json data is a string
        if (data['fsGroupChangePolicy'] && !(typeof data['fsGroupChangePolicy'] === 'string' || data['fsGroupChangePolicy'] instanceof String)) {
            throw new Error("Expected the field `fsGroupChangePolicy` to be a primitive type in the JSON string but got " + data['fsGroupChangePolicy']);
        }
        // ensure the json data is a string
        if (data['seLinuxChangePolicy'] && !(typeof data['seLinuxChangePolicy'] === 'string' || data['seLinuxChangePolicy'] instanceof String)) {
            throw new Error("Expected the field `seLinuxChangePolicy` to be a primitive type in the JSON string but got " + data['seLinuxChangePolicy']);
        }
        // validate the optional field `seLinuxOptions`
        if (data['seLinuxOptions']) { // data not null
          PodSpecAllOfSecurityContextAllOfSeLinuxOptions.validateJSON(data['seLinuxOptions']);
        }
        // validate the optional field `seccompProfile`
        if (data['seccompProfile']) { // data not null
          PodSpecAllOfSecurityContextAllOfSeccompProfile.validateJSON(data['seccompProfile']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supplementalGroups'])) {
            throw new Error("Expected the field `supplementalGroups` to be an array in the JSON data but got " + data['supplementalGroups']);
        }
        // ensure the json data is a string
        if (data['supplementalGroupsPolicy'] && !(typeof data['supplementalGroupsPolicy'] === 'string' || data['supplementalGroupsPolicy'] instanceof String)) {
            throw new Error("Expected the field `supplementalGroupsPolicy` to be a primitive type in the JSON string but got " + data['supplementalGroupsPolicy']);
        }
        if (data['sysctls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sysctls'])) {
                throw new Error("Expected the field `sysctls` to be an array in the JSON data but got " + data['sysctls']);
            }
            // validate the optional field `sysctls` (array)
            for (const item of data['sysctls']) {
                PodSpecAllOfSecurityContextAllOfSysctlsInner.validateJSON(item);
            };
        }
        // validate the optional field `windowsOptions`
        if (data['windowsOptions']) { // data not null
          PodSpecAllOfSecurityContextAllOfWindowsOptions.validateJSON(data['windowsOptions']);
        }

        return true;
    }


}



/**
 * @member {module:model/PodSpecAllOfSecurityContextAllOfAppArmorProfile} appArmorProfile
 */
PodSpecAllOfSecurityContext.prototype['appArmorProfile'] = undefined;

/**
 * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} fsGroup
 */
PodSpecAllOfSecurityContext.prototype['fsGroup'] = undefined;

/**
 * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.
 * @member {String} fsGroupChangePolicy
 */
PodSpecAllOfSecurityContext.prototype['fsGroupChangePolicy'] = undefined;

/**
 * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsGroup
 */
PodSpecAllOfSecurityContext.prototype['runAsGroup'] = undefined;

/**
 * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 * @member {Boolean} runAsNonRoot
 */
PodSpecAllOfSecurityContext.prototype['runAsNonRoot'] = undefined;

/**
 * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsUser
 */
PodSpecAllOfSecurityContext.prototype['runAsUser'] = undefined;

/**
 * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod. It has no effect on nodes that do not support SELinux or to volumes does not support SELinux. Valid values are \"MountOption\" and \"Recursive\".  \"Recursive\" means relabeling of all files on all Pod volumes by the container runtime. This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.  \"MountOption\" mounts all eligible Pod volumes with `-o context` mount option. This requires all Pods that share the same volume to use the same SELinux label. It is not possible to share the same volume among privileged and unprivileged Pods. Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their CSIDriver instance. Other volumes are always re-labelled recursively. \"MountOption\" value is allowed only when SELinuxMount feature gate is enabled.  If not specified and SELinuxMount feature gate is enabled, \"MountOption\" is used. If not specified and SELinuxMount feature gate is disabled, \"MountOption\" is used for ReadWriteOncePod volumes and \"Recursive\" for all other volumes.  This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.  All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state. Note that this field cannot be set when spec.os.name is windows.
 * @member {String} seLinuxChangePolicy
 */
PodSpecAllOfSecurityContext.prototype['seLinuxChangePolicy'] = undefined;

/**
 * @member {module:model/PodSpecAllOfSecurityContextAllOfSeLinuxOptions} seLinuxOptions
 */
PodSpecAllOfSecurityContext.prototype['seLinuxOptions'] = undefined;

/**
 * @member {module:model/PodSpecAllOfSecurityContextAllOfSeccompProfile} seccompProfile
 */
PodSpecAllOfSecurityContext.prototype['seccompProfile'] = undefined;

/**
 * A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
 * @member {Array.<Number>} supplementalGroups
 */
PodSpecAllOfSecurityContext.prototype['supplementalGroups'] = undefined;

/**
 * Defines how supplemental groups of the first container processes are calculated. Valid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
 * @member {String} supplementalGroupsPolicy
 */
PodSpecAllOfSecurityContext.prototype['supplementalGroupsPolicy'] = undefined;

/**
 * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
 * @member {Array.<module:model/PodSpecAllOfSecurityContextAllOfSysctlsInner>} sysctls
 */
PodSpecAllOfSecurityContext.prototype['sysctls'] = undefined;

/**
 * @member {module:model/PodSpecAllOfSecurityContextAllOfWindowsOptions} windowsOptions
 */
PodSpecAllOfSecurityContext.prototype['windowsOptions'] = undefined;






export default PodSpecAllOfSecurityContext;

