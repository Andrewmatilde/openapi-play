/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef</code>.
     * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn&#39;t specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn&#39;t set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef
     * @param kind {String} Kind is the type of resource being referenced
     * @param name {String} Name is the name of resource being referenced
     */
    constructor(kind, name) { 
        
        PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.initialize(this, kind, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, name) { 
        obj['kind'] = kind || '';
        obj['name'] = name || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef} The populated <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef();

            if (data.hasOwnProperty('apiGroup')) {
                obj['apiGroup'] = ApiClient.convertToType(data['apiGroup'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiGroup'] && !(typeof data['apiGroup'] === 'string' || data['apiGroup'] instanceof String)) {
            throw new Error("Expected the field `apiGroup` to be a primitive type in the JSON string but got " + data['apiGroup']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.RequiredProperties = ["kind", "name"];

/**
 * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
 * @member {String} apiGroup
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.prototype['apiGroup'] = undefined;

/**
 * Kind is the type of resource being referenced
 * @member {String} kind
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.prototype['kind'] = '';

/**
 * Name is the name of resource being referenced
 * @member {String} name
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.prototype['name'] = '';

/**
 * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
 * @member {String} namespace
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.prototype['namespace'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef;

