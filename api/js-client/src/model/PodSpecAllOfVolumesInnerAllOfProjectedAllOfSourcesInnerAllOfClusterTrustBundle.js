/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundleAllOfLabelSelector from './PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundleAllOfLabelSelector';

/**
 * The PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle</code>.
     * ClusterTrustBundle allows a pod to access the &#x60;.spec.trustBundle&#x60; field of ClusterTrustBundle objects in an auto-updating file.  Alpha, gated by the ClusterTrustBundleProjection feature gate.  ClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.  Kubelet performs aggressive normalization of the PEM contents written into the pod filesystem.  Esoteric PEM features such as inter-block comments and block headers are stripped.  Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle
     * @param path {String} Relative path from the volume root to write the bundle.
     */
    constructor(path) { 
        
        PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.initialize(this, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path) { 
        obj['path'] = path || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle} The populated <code>PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle();

            if (data.hasOwnProperty('labelSelector')) {
                obj['labelSelector'] = PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundleAllOfLabelSelector.constructFromObject(data['labelSelector']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('optional')) {
                obj['optional'] = ApiClient.convertToType(data['optional'], 'Boolean');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('signerName')) {
                obj['signerName'] = ApiClient.convertToType(data['signerName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `labelSelector`
        if (data['labelSelector']) { // data not null
          PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundleAllOfLabelSelector.validateJSON(data['labelSelector']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['signerName'] && !(typeof data['signerName'] === 'string' || data['signerName'] instanceof String)) {
            throw new Error("Expected the field `signerName` to be a primitive type in the JSON string but got " + data['signerName']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.RequiredProperties = ["path"];

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundleAllOfLabelSelector} labelSelector
 */
PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.prototype['labelSelector'] = undefined;

/**
 * Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
 * @member {String} name
 */
PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.prototype['name'] = undefined;

/**
 * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
 * @member {Boolean} optional
 */
PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.prototype['optional'] = undefined;

/**
 * Relative path from the volume root to write the bundle.
 * @member {String} path
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.prototype['path'] = '';

/**
 * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
 * @member {String} signerName
 */
PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle.prototype['signerName'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfProjectedAllOfSourcesInnerAllOfClusterTrustBundle;

