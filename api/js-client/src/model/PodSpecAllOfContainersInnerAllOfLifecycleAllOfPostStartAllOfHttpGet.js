/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfHttpHeadersInner from './PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfHttpHeadersInner';
import PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfPort from './PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfPort';

/**
 * The PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet model module.
 * @module model/PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet
 * @version 1.0.0
 */
class PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet {
    /**
     * Constructs a new <code>PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet</code>.
     * HTTPGet specifies an HTTP GET request to perform.
     * @alias module:model/PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet
     * @param port {module:model/PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfPort} 
     */
    constructor(port) { 
        
        PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.initialize(this, port);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, port) { 
        obj['port'] = port;
    }

    /**
     * Constructs a <code>PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet} The populated <code>PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('httpHeaders')) {
                obj['httpHeaders'] = ApiClient.convertToType(data['httpHeaders'], [PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfHttpHeadersInner]);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfPort.constructFromObject(data['port']);
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        if (data['httpHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['httpHeaders'])) {
                throw new Error("Expected the field `httpHeaders` to be an array in the JSON data but got " + data['httpHeaders']);
            }
            // validate the optional field `httpHeaders` (array)
            for (const item of data['httpHeaders']) {
                PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfHttpHeadersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // validate the optional field `port`
        if (data['port']) { // data not null
          PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfPort.validateJSON(data['port']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }

        return true;
    }


}

PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.RequiredProperties = ["port"];

/**
 * Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
 * @member {String} host
 */
PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.prototype['host'] = undefined;

/**
 * Custom headers to set in the request. HTTP allows repeated headers.
 * @member {Array.<module:model/PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfHttpHeadersInner>} httpHeaders
 */
PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.prototype['httpHeaders'] = undefined;

/**
 * Path to access on the HTTP server.
 * @member {String} path
 */
PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.prototype['path'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGetAllOfPort} port
 */
PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.prototype['port'] = undefined;

/**
 * Scheme to use for connecting to the host. Defaults to HTTP.
 * @member {String} scheme
 */
PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet.prototype['scheme'] = undefined;






export default PodSpecAllOfContainersInnerAllOfLifecycleAllOfPostStartAllOfHttpGet;

