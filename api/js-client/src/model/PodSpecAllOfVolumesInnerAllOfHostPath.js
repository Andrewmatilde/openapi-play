/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodSpecAllOfVolumesInnerAllOfHostPath model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfHostPath
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfHostPath {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfHostPath</code>.
     * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfHostPath
     * @param path {String} path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    constructor(path) { 
        
        PodSpecAllOfVolumesInnerAllOfHostPath.initialize(this, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path) { 
        obj['path'] = path || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfHostPath</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfHostPath} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfHostPath} The populated <code>PodSpecAllOfVolumesInnerAllOfHostPath</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfHostPath();

            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfHostPath</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfHostPath</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfHostPath.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfHostPath.RequiredProperties = ["path"];

/**
 * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
 * @member {String} path
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfHostPath.prototype['path'] = '';

/**
 * type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
 * @member {String} type
 */
PodSpecAllOfVolumesInnerAllOfHostPath.prototype['type'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfHostPath;

