/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfContainersInnerAllOfEnvInnerAllOfValueFrom from './PodSpecAllOfContainersInnerAllOfEnvInnerAllOfValueFrom';

/**
 * The PodSpecAllOfContainersInnerAllOfEnvInner model module.
 * @module model/PodSpecAllOfContainersInnerAllOfEnvInner
 * @version 1.0.0
 */
class PodSpecAllOfContainersInnerAllOfEnvInner {
    /**
     * Constructs a new <code>PodSpecAllOfContainersInnerAllOfEnvInner</code>.
     * @alias module:model/PodSpecAllOfContainersInnerAllOfEnvInner
     * @param name {String} Name of the environment variable. Must be a C_IDENTIFIER.
     */
    constructor(name) { 
        
        PodSpecAllOfContainersInnerAllOfEnvInner.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfContainersInnerAllOfEnvInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfContainersInnerAllOfEnvInner} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfContainersInnerAllOfEnvInner} The populated <code>PodSpecAllOfContainersInnerAllOfEnvInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfContainersInnerAllOfEnvInner();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('valueFrom')) {
                obj['valueFrom'] = PodSpecAllOfContainersInnerAllOfEnvInnerAllOfValueFrom.constructFromObject(data['valueFrom']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfContainersInnerAllOfEnvInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfContainersInnerAllOfEnvInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfContainersInnerAllOfEnvInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // validate the optional field `valueFrom`
        if (data['valueFrom']) { // data not null
          PodSpecAllOfContainersInnerAllOfEnvInnerAllOfValueFrom.validateJSON(data['valueFrom']);
        }

        return true;
    }


}

PodSpecAllOfContainersInnerAllOfEnvInner.RequiredProperties = ["name"];

/**
 * Name of the environment variable. Must be a C_IDENTIFIER.
 * @member {String} name
 * @default ''
 */
PodSpecAllOfContainersInnerAllOfEnvInner.prototype['name'] = '';

/**
 * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".
 * @member {String} value
 */
PodSpecAllOfContainersInnerAllOfEnvInner.prototype['value'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfEnvInnerAllOfValueFrom} valueFrom
 */
PodSpecAllOfContainersInnerAllOfEnvInner.prototype['valueFrom'] = undefined;






export default PodSpecAllOfContainersInnerAllOfEnvInner;

