/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfIscsiAllOfSecretRef from './PodSpecAllOfVolumesInnerAllOfIscsiAllOfSecretRef';

/**
 * The PodSpecAllOfVolumesInnerAllOfIscsi model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfIscsi
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfIscsi {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfIscsi</code>.
     * iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfIscsi
     * @param iqn {String} iqn is the target iSCSI Qualified Name.
     * @param lun {Number} lun represents iSCSI Target Lun number.
     * @param targetPortal {String} targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    constructor(iqn, lun, targetPortal) { 
        
        PodSpecAllOfVolumesInnerAllOfIscsi.initialize(this, iqn, lun, targetPortal);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, iqn, lun, targetPortal) { 
        obj['iqn'] = iqn || '';
        obj['iscsiInterface'] = 'default';
        obj['lun'] = lun || 0;
        obj['targetPortal'] = targetPortal || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfIscsi</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfIscsi} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfIscsi} The populated <code>PodSpecAllOfVolumesInnerAllOfIscsi</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfIscsi();

            if (data.hasOwnProperty('chapAuthDiscovery')) {
                obj['chapAuthDiscovery'] = ApiClient.convertToType(data['chapAuthDiscovery'], 'Boolean');
            }
            if (data.hasOwnProperty('chapAuthSession')) {
                obj['chapAuthSession'] = ApiClient.convertToType(data['chapAuthSession'], 'Boolean');
            }
            if (data.hasOwnProperty('fsType')) {
                obj['fsType'] = ApiClient.convertToType(data['fsType'], 'String');
            }
            if (data.hasOwnProperty('initiatorName')) {
                obj['initiatorName'] = ApiClient.convertToType(data['initiatorName'], 'String');
            }
            if (data.hasOwnProperty('iqn')) {
                obj['iqn'] = ApiClient.convertToType(data['iqn'], 'String');
            }
            if (data.hasOwnProperty('iscsiInterface')) {
                obj['iscsiInterface'] = ApiClient.convertToType(data['iscsiInterface'], 'String');
            }
            if (data.hasOwnProperty('lun')) {
                obj['lun'] = ApiClient.convertToType(data['lun'], 'Number');
            }
            if (data.hasOwnProperty('portals')) {
                obj['portals'] = ApiClient.convertToType(data['portals'], ['String']);
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('secretRef')) {
                obj['secretRef'] = PodSpecAllOfVolumesInnerAllOfIscsiAllOfSecretRef.constructFromObject(data['secretRef']);
            }
            if (data.hasOwnProperty('targetPortal')) {
                obj['targetPortal'] = ApiClient.convertToType(data['targetPortal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfIscsi</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfIscsi</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfIscsi.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fsType'] && !(typeof data['fsType'] === 'string' || data['fsType'] instanceof String)) {
            throw new Error("Expected the field `fsType` to be a primitive type in the JSON string but got " + data['fsType']);
        }
        // ensure the json data is a string
        if (data['initiatorName'] && !(typeof data['initiatorName'] === 'string' || data['initiatorName'] instanceof String)) {
            throw new Error("Expected the field `initiatorName` to be a primitive type in the JSON string but got " + data['initiatorName']);
        }
        // ensure the json data is a string
        if (data['iqn'] && !(typeof data['iqn'] === 'string' || data['iqn'] instanceof String)) {
            throw new Error("Expected the field `iqn` to be a primitive type in the JSON string but got " + data['iqn']);
        }
        // ensure the json data is a string
        if (data['iscsiInterface'] && !(typeof data['iscsiInterface'] === 'string' || data['iscsiInterface'] instanceof String)) {
            throw new Error("Expected the field `iscsiInterface` to be a primitive type in the JSON string but got " + data['iscsiInterface']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['portals'])) {
            throw new Error("Expected the field `portals` to be an array in the JSON data but got " + data['portals']);
        }
        // validate the optional field `secretRef`
        if (data['secretRef']) { // data not null
          PodSpecAllOfVolumesInnerAllOfIscsiAllOfSecretRef.validateJSON(data['secretRef']);
        }
        // ensure the json data is a string
        if (data['targetPortal'] && !(typeof data['targetPortal'] === 'string' || data['targetPortal'] instanceof String)) {
            throw new Error("Expected the field `targetPortal` to be a primitive type in the JSON string but got " + data['targetPortal']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfIscsi.RequiredProperties = ["iqn", "lun", "targetPortal"];

/**
 * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
 * @member {Boolean} chapAuthDiscovery
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['chapAuthDiscovery'] = undefined;

/**
 * chapAuthSession defines whether support iSCSI Session CHAP authentication
 * @member {Boolean} chapAuthSession
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['chapAuthSession'] = undefined;

/**
 * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
 * @member {String} fsType
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['fsType'] = undefined;

/**
 * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
 * @member {String} initiatorName
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['initiatorName'] = undefined;

/**
 * iqn is the target iSCSI Qualified Name.
 * @member {String} iqn
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['iqn'] = '';

/**
 * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
 * @member {String} iscsiInterface
 * @default 'default'
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['iscsiInterface'] = 'default';

/**
 * lun represents iSCSI Target Lun number.
 * @member {Number} lun
 * @default 0
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['lun'] = 0;

/**
 * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
 * @member {Array.<String>} portals
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['portals'] = undefined;

/**
 * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
 * @member {Boolean} readOnly
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['readOnly'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfIscsiAllOfSecretRef} secretRef
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['secretRef'] = undefined;

/**
 * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
 * @member {String} targetPortal
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfIscsi.prototype['targetPortal'] = '';






export default PodSpecAllOfVolumesInnerAllOfIscsi;

