/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim</code>.
     * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim
     * @param claimName {String} claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     */
    constructor(claimName) { 
        
        PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim.initialize(this, claimName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, claimName) { 
        obj['claimName'] = claimName || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim} The populated <code>PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim();

            if (data.hasOwnProperty('claimName')) {
                obj['claimName'] = ApiClient.convertToType(data['claimName'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['claimName'] && !(typeof data['claimName'] === 'string' || data['claimName'] instanceof String)) {
            throw new Error("Expected the field `claimName` to be a primitive type in the JSON string but got " + data['claimName']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim.RequiredProperties = ["claimName"];

/**
 * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 * @member {String} claimName
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim.prototype['claimName'] = '';

/**
 * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
 * @member {Boolean} readOnly
 */
PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim.prototype['readOnly'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim;

