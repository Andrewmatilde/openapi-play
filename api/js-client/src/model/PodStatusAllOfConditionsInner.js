/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodStatusAllOfConditionsInner model module.
 * @module model/PodStatusAllOfConditionsInner
 * @version 1.0.0
 */
class PodStatusAllOfConditionsInner {
    /**
     * Constructs a new <code>PodStatusAllOfConditionsInner</code>.
     * @alias module:model/PodStatusAllOfConditionsInner
     * @param status {String} Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     * @param type {String} Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     */
    constructor(status, type) { 
        
        PodStatusAllOfConditionsInner.initialize(this, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, type) { 
        obj['status'] = status || '';
        obj['type'] = type || '';
    }

    /**
     * Constructs a <code>PodStatusAllOfConditionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodStatusAllOfConditionsInner} obj Optional instance to populate.
     * @return {module:model/PodStatusAllOfConditionsInner} The populated <code>PodStatusAllOfConditionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodStatusAllOfConditionsInner();

            if (data.hasOwnProperty('lastProbeTime')) {
                obj['lastProbeTime'] = ApiClient.convertToType(data['lastProbeTime'], 'Date');
            }
            if (data.hasOwnProperty('lastTransitionTime')) {
                obj['lastTransitionTime'] = ApiClient.convertToType(data['lastTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('observedGeneration')) {
                obj['observedGeneration'] = ApiClient.convertToType(data['observedGeneration'], 'Number');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodStatusAllOfConditionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodStatusAllOfConditionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodStatusAllOfConditionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PodStatusAllOfConditionsInner.RequiredProperties = ["status", "type"];

/**
 * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
 * @member {Date} lastProbeTime
 */
PodStatusAllOfConditionsInner.prototype['lastProbeTime'] = undefined;

/**
 * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
 * @member {Date} lastTransitionTime
 */
PodStatusAllOfConditionsInner.prototype['lastTransitionTime'] = undefined;

/**
 * Human-readable message indicating details about last transition.
 * @member {String} message
 */
PodStatusAllOfConditionsInner.prototype['message'] = undefined;

/**
 * If set, this represents the .metadata.generation that the pod condition was set based upon. This is an alpha field. Enable PodObservedGenerationTracking to be able to use this field.
 * @member {Number} observedGeneration
 */
PodStatusAllOfConditionsInner.prototype['observedGeneration'] = undefined;

/**
 * Unique, one-word, CamelCase reason for the condition's last transition.
 * @member {String} reason
 */
PodStatusAllOfConditionsInner.prototype['reason'] = undefined;

/**
 * Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
 * @member {String} status
 * @default ''
 */
PodStatusAllOfConditionsInner.prototype['status'] = '';

/**
 * Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
 * @member {String} type
 * @default ''
 */
PodStatusAllOfConditionsInner.prototype['type'] = '';






export default PodStatusAllOfConditionsInner;

