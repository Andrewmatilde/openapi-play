/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodSpecAllOfVolumesInnerAllOfVsphereVolume model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfVsphereVolume
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfVsphereVolume {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfVsphereVolume</code>.
     * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine. Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type are redirected to the csi.vsphere.vmware.com CSI driver.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfVsphereVolume
     * @param volumePath {String} volumePath is the path that identifies vSphere volume vmdk
     */
    constructor(volumePath) { 
        
        PodSpecAllOfVolumesInnerAllOfVsphereVolume.initialize(this, volumePath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, volumePath) { 
        obj['volumePath'] = volumePath || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfVsphereVolume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfVsphereVolume} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfVsphereVolume} The populated <code>PodSpecAllOfVolumesInnerAllOfVsphereVolume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfVsphereVolume();

            if (data.hasOwnProperty('fsType')) {
                obj['fsType'] = ApiClient.convertToType(data['fsType'], 'String');
            }
            if (data.hasOwnProperty('storagePolicyID')) {
                obj['storagePolicyID'] = ApiClient.convertToType(data['storagePolicyID'], 'String');
            }
            if (data.hasOwnProperty('storagePolicyName')) {
                obj['storagePolicyName'] = ApiClient.convertToType(data['storagePolicyName'], 'String');
            }
            if (data.hasOwnProperty('volumePath')) {
                obj['volumePath'] = ApiClient.convertToType(data['volumePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfVsphereVolume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfVsphereVolume</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfVsphereVolume.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fsType'] && !(typeof data['fsType'] === 'string' || data['fsType'] instanceof String)) {
            throw new Error("Expected the field `fsType` to be a primitive type in the JSON string but got " + data['fsType']);
        }
        // ensure the json data is a string
        if (data['storagePolicyID'] && !(typeof data['storagePolicyID'] === 'string' || data['storagePolicyID'] instanceof String)) {
            throw new Error("Expected the field `storagePolicyID` to be a primitive type in the JSON string but got " + data['storagePolicyID']);
        }
        // ensure the json data is a string
        if (data['storagePolicyName'] && !(typeof data['storagePolicyName'] === 'string' || data['storagePolicyName'] instanceof String)) {
            throw new Error("Expected the field `storagePolicyName` to be a primitive type in the JSON string but got " + data['storagePolicyName']);
        }
        // ensure the json data is a string
        if (data['volumePath'] && !(typeof data['volumePath'] === 'string' || data['volumePath'] instanceof String)) {
            throw new Error("Expected the field `volumePath` to be a primitive type in the JSON string but got " + data['volumePath']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfVsphereVolume.RequiredProperties = ["volumePath"];

/**
 * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
 * @member {String} fsType
 */
PodSpecAllOfVolumesInnerAllOfVsphereVolume.prototype['fsType'] = undefined;

/**
 * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
 * @member {String} storagePolicyID
 */
PodSpecAllOfVolumesInnerAllOfVsphereVolume.prototype['storagePolicyID'] = undefined;

/**
 * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
 * @member {String} storagePolicyName
 */
PodSpecAllOfVolumesInnerAllOfVsphereVolume.prototype['storagePolicyName'] = undefined;

/**
 * volumePath is the path that identifies vSphere volume vmdk
 * @member {String} volumePath
 * @default ''
 */
PodSpecAllOfVolumesInnerAllOfVsphereVolume.prototype['volumePath'] = '';






export default PodSpecAllOfVolumesInnerAllOfVsphereVolume;

