/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfContainersInnerAllOfEnvFromInner from './PodSpecAllOfContainersInnerAllOfEnvFromInner';
import PodSpecAllOfContainersInnerAllOfEnvInner from './PodSpecAllOfContainersInnerAllOfEnvInner';
import PodSpecAllOfContainersInnerAllOfLifecycle from './PodSpecAllOfContainersInnerAllOfLifecycle';
import PodSpecAllOfContainersInnerAllOfLivenessProbe from './PodSpecAllOfContainersInnerAllOfLivenessProbe';
import PodSpecAllOfContainersInnerAllOfPortsInner from './PodSpecAllOfContainersInnerAllOfPortsInner';
import PodSpecAllOfContainersInnerAllOfReadinessProbe from './PodSpecAllOfContainersInnerAllOfReadinessProbe';
import PodSpecAllOfContainersInnerAllOfResizePolicyInner from './PodSpecAllOfContainersInnerAllOfResizePolicyInner';
import PodSpecAllOfContainersInnerAllOfResources from './PodSpecAllOfContainersInnerAllOfResources';
import PodSpecAllOfContainersInnerAllOfSecurityContext from './PodSpecAllOfContainersInnerAllOfSecurityContext';
import PodSpecAllOfContainersInnerAllOfStartupProbe from './PodSpecAllOfContainersInnerAllOfStartupProbe';
import PodSpecAllOfContainersInnerAllOfVolumeDevicesInner from './PodSpecAllOfContainersInnerAllOfVolumeDevicesInner';
import PodSpecAllOfContainersInnerAllOfVolumeMountsInner from './PodSpecAllOfContainersInnerAllOfVolumeMountsInner';

/**
 * The PodSpecAllOfContainersInner model module.
 * @module model/PodSpecAllOfContainersInner
 * @version 1.0.0
 */
class PodSpecAllOfContainersInner {
    /**
     * Constructs a new <code>PodSpecAllOfContainersInner</code>.
     * @alias module:model/PodSpecAllOfContainersInner
     * @param name {String} Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    constructor(name) { 
        
        PodSpecAllOfContainersInner.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfContainersInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfContainersInner} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfContainersInner} The populated <code>PodSpecAllOfContainersInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfContainersInner();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], ['String']);
            }
            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], ['String']);
            }
            if (data.hasOwnProperty('env')) {
                obj['env'] = ApiClient.convertToType(data['env'], [PodSpecAllOfContainersInnerAllOfEnvInner]);
            }
            if (data.hasOwnProperty('envFrom')) {
                obj['envFrom'] = ApiClient.convertToType(data['envFrom'], [PodSpecAllOfContainersInnerAllOfEnvFromInner]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('imagePullPolicy')) {
                obj['imagePullPolicy'] = ApiClient.convertToType(data['imagePullPolicy'], 'String');
            }
            if (data.hasOwnProperty('lifecycle')) {
                obj['lifecycle'] = PodSpecAllOfContainersInnerAllOfLifecycle.constructFromObject(data['lifecycle']);
            }
            if (data.hasOwnProperty('livenessProbe')) {
                obj['livenessProbe'] = PodSpecAllOfContainersInnerAllOfLivenessProbe.constructFromObject(data['livenessProbe']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], [PodSpecAllOfContainersInnerAllOfPortsInner]);
            }
            if (data.hasOwnProperty('readinessProbe')) {
                obj['readinessProbe'] = PodSpecAllOfContainersInnerAllOfReadinessProbe.constructFromObject(data['readinessProbe']);
            }
            if (data.hasOwnProperty('resizePolicy')) {
                obj['resizePolicy'] = ApiClient.convertToType(data['resizePolicy'], [PodSpecAllOfContainersInnerAllOfResizePolicyInner]);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = PodSpecAllOfContainersInnerAllOfResources.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('restartPolicy')) {
                obj['restartPolicy'] = ApiClient.convertToType(data['restartPolicy'], 'String');
            }
            if (data.hasOwnProperty('securityContext')) {
                obj['securityContext'] = PodSpecAllOfContainersInnerAllOfSecurityContext.constructFromObject(data['securityContext']);
            }
            if (data.hasOwnProperty('startupProbe')) {
                obj['startupProbe'] = PodSpecAllOfContainersInnerAllOfStartupProbe.constructFromObject(data['startupProbe']);
            }
            if (data.hasOwnProperty('stdin')) {
                obj['stdin'] = ApiClient.convertToType(data['stdin'], 'Boolean');
            }
            if (data.hasOwnProperty('stdinOnce')) {
                obj['stdinOnce'] = ApiClient.convertToType(data['stdinOnce'], 'Boolean');
            }
            if (data.hasOwnProperty('terminationMessagePath')) {
                obj['terminationMessagePath'] = ApiClient.convertToType(data['terminationMessagePath'], 'String');
            }
            if (data.hasOwnProperty('terminationMessagePolicy')) {
                obj['terminationMessagePolicy'] = ApiClient.convertToType(data['terminationMessagePolicy'], 'String');
            }
            if (data.hasOwnProperty('tty')) {
                obj['tty'] = ApiClient.convertToType(data['tty'], 'Boolean');
            }
            if (data.hasOwnProperty('volumeDevices')) {
                obj['volumeDevices'] = ApiClient.convertToType(data['volumeDevices'], [PodSpecAllOfContainersInnerAllOfVolumeDevicesInner]);
            }
            if (data.hasOwnProperty('volumeMounts')) {
                obj['volumeMounts'] = ApiClient.convertToType(data['volumeMounts'], [PodSpecAllOfContainersInnerAllOfVolumeMountsInner]);
            }
            if (data.hasOwnProperty('workingDir')) {
                obj['workingDir'] = ApiClient.convertToType(data['workingDir'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfContainersInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfContainersInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfContainersInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['command'])) {
            throw new Error("Expected the field `command` to be an array in the JSON data but got " + data['command']);
        }
        if (data['env']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['env'])) {
                throw new Error("Expected the field `env` to be an array in the JSON data but got " + data['env']);
            }
            // validate the optional field `env` (array)
            for (const item of data['env']) {
                PodSpecAllOfContainersInnerAllOfEnvInner.validateJSON(item);
            };
        }
        if (data['envFrom']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['envFrom'])) {
                throw new Error("Expected the field `envFrom` to be an array in the JSON data but got " + data['envFrom']);
            }
            // validate the optional field `envFrom` (array)
            for (const item of data['envFrom']) {
                PodSpecAllOfContainersInnerAllOfEnvFromInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['imagePullPolicy'] && !(typeof data['imagePullPolicy'] === 'string' || data['imagePullPolicy'] instanceof String)) {
            throw new Error("Expected the field `imagePullPolicy` to be a primitive type in the JSON string but got " + data['imagePullPolicy']);
        }
        // validate the optional field `lifecycle`
        if (data['lifecycle']) { // data not null
          PodSpecAllOfContainersInnerAllOfLifecycle.validateJSON(data['lifecycle']);
        }
        // validate the optional field `livenessProbe`
        if (data['livenessProbe']) { // data not null
          PodSpecAllOfContainersInnerAllOfLivenessProbe.validateJSON(data['livenessProbe']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['ports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ports'])) {
                throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
            }
            // validate the optional field `ports` (array)
            for (const item of data['ports']) {
                PodSpecAllOfContainersInnerAllOfPortsInner.validateJSON(item);
            };
        }
        // validate the optional field `readinessProbe`
        if (data['readinessProbe']) { // data not null
          PodSpecAllOfContainersInnerAllOfReadinessProbe.validateJSON(data['readinessProbe']);
        }
        if (data['resizePolicy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resizePolicy'])) {
                throw new Error("Expected the field `resizePolicy` to be an array in the JSON data but got " + data['resizePolicy']);
            }
            // validate the optional field `resizePolicy` (array)
            for (const item of data['resizePolicy']) {
                PodSpecAllOfContainersInnerAllOfResizePolicyInner.validateJSON(item);
            };
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          PodSpecAllOfContainersInnerAllOfResources.validateJSON(data['resources']);
        }
        // ensure the json data is a string
        if (data['restartPolicy'] && !(typeof data['restartPolicy'] === 'string' || data['restartPolicy'] instanceof String)) {
            throw new Error("Expected the field `restartPolicy` to be a primitive type in the JSON string but got " + data['restartPolicy']);
        }
        // validate the optional field `securityContext`
        if (data['securityContext']) { // data not null
          PodSpecAllOfContainersInnerAllOfSecurityContext.validateJSON(data['securityContext']);
        }
        // validate the optional field `startupProbe`
        if (data['startupProbe']) { // data not null
          PodSpecAllOfContainersInnerAllOfStartupProbe.validateJSON(data['startupProbe']);
        }
        // ensure the json data is a string
        if (data['terminationMessagePath'] && !(typeof data['terminationMessagePath'] === 'string' || data['terminationMessagePath'] instanceof String)) {
            throw new Error("Expected the field `terminationMessagePath` to be a primitive type in the JSON string but got " + data['terminationMessagePath']);
        }
        // ensure the json data is a string
        if (data['terminationMessagePolicy'] && !(typeof data['terminationMessagePolicy'] === 'string' || data['terminationMessagePolicy'] instanceof String)) {
            throw new Error("Expected the field `terminationMessagePolicy` to be a primitive type in the JSON string but got " + data['terminationMessagePolicy']);
        }
        if (data['volumeDevices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeDevices'])) {
                throw new Error("Expected the field `volumeDevices` to be an array in the JSON data but got " + data['volumeDevices']);
            }
            // validate the optional field `volumeDevices` (array)
            for (const item of data['volumeDevices']) {
                PodSpecAllOfContainersInnerAllOfVolumeDevicesInner.validateJSON(item);
            };
        }
        if (data['volumeMounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeMounts'])) {
                throw new Error("Expected the field `volumeMounts` to be an array in the JSON data but got " + data['volumeMounts']);
            }
            // validate the optional field `volumeMounts` (array)
            for (const item of data['volumeMounts']) {
                PodSpecAllOfContainersInnerAllOfVolumeMountsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workingDir'] && !(typeof data['workingDir'] === 'string' || data['workingDir'] instanceof String)) {
            throw new Error("Expected the field `workingDir` to be a primitive type in the JSON string but got " + data['workingDir']);
        }

        return true;
    }


}

PodSpecAllOfContainersInner.RequiredProperties = ["name"];

/**
 * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
 * @member {Array.<String>} args
 */
PodSpecAllOfContainersInner.prototype['args'] = undefined;

/**
 * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
 * @member {Array.<String>} command
 */
PodSpecAllOfContainersInner.prototype['command'] = undefined;

/**
 * List of environment variables to set in the container. Cannot be updated.
 * @member {Array.<module:model/PodSpecAllOfContainersInnerAllOfEnvInner>} env
 */
PodSpecAllOfContainersInner.prototype['env'] = undefined;

/**
 * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
 * @member {Array.<module:model/PodSpecAllOfContainersInnerAllOfEnvFromInner>} envFrom
 */
PodSpecAllOfContainersInner.prototype['envFrom'] = undefined;

/**
 * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
 * @member {String} image
 */
PodSpecAllOfContainersInner.prototype['image'] = undefined;

/**
 * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
 * @member {String} imagePullPolicy
 */
PodSpecAllOfContainersInner.prototype['imagePullPolicy'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfLifecycle} lifecycle
 */
PodSpecAllOfContainersInner.prototype['lifecycle'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfLivenessProbe} livenessProbe
 */
PodSpecAllOfContainersInner.prototype['livenessProbe'] = undefined;

/**
 * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
 * @member {String} name
 * @default ''
 */
PodSpecAllOfContainersInner.prototype['name'] = '';

/**
 * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
 * @member {Array.<module:model/PodSpecAllOfContainersInnerAllOfPortsInner>} ports
 */
PodSpecAllOfContainersInner.prototype['ports'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfReadinessProbe} readinessProbe
 */
PodSpecAllOfContainersInner.prototype['readinessProbe'] = undefined;

/**
 * Resources resize policy for the container.
 * @member {Array.<module:model/PodSpecAllOfContainersInnerAllOfResizePolicyInner>} resizePolicy
 */
PodSpecAllOfContainersInner.prototype['resizePolicy'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfResources} resources
 */
PodSpecAllOfContainersInner.prototype['resources'] = undefined;

/**
 * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
 * @member {String} restartPolicy
 */
PodSpecAllOfContainersInner.prototype['restartPolicy'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfSecurityContext} securityContext
 */
PodSpecAllOfContainersInner.prototype['securityContext'] = undefined;

/**
 * @member {module:model/PodSpecAllOfContainersInnerAllOfStartupProbe} startupProbe
 */
PodSpecAllOfContainersInner.prototype['startupProbe'] = undefined;

/**
 * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
 * @member {Boolean} stdin
 */
PodSpecAllOfContainersInner.prototype['stdin'] = undefined;

/**
 * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
 * @member {Boolean} stdinOnce
 */
PodSpecAllOfContainersInner.prototype['stdinOnce'] = undefined;

/**
 * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
 * @member {String} terminationMessagePath
 */
PodSpecAllOfContainersInner.prototype['terminationMessagePath'] = undefined;

/**
 * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
 * @member {String} terminationMessagePolicy
 */
PodSpecAllOfContainersInner.prototype['terminationMessagePolicy'] = undefined;

/**
 * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
 * @member {Boolean} tty
 */
PodSpecAllOfContainersInner.prototype['tty'] = undefined;

/**
 * volumeDevices is the list of block devices to be used by the container.
 * @member {Array.<module:model/PodSpecAllOfContainersInnerAllOfVolumeDevicesInner>} volumeDevices
 */
PodSpecAllOfContainersInner.prototype['volumeDevices'] = undefined;

/**
 * Pod volumes to mount into the container's filesystem. Cannot be updated.
 * @member {Array.<module:model/PodSpecAllOfContainersInnerAllOfVolumeMountsInner>} volumeMounts
 */
PodSpecAllOfContainersInner.prototype['volumeMounts'] = undefined;

/**
 * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
 * @member {String} workingDir
 */
PodSpecAllOfContainersInner.prototype['workingDir'] = undefined;






export default PodSpecAllOfContainersInner;

