/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfStorageosAllOfSecretRef from './PodSpecAllOfVolumesInnerAllOfStorageosAllOfSecretRef';

/**
 * The PodSpecAllOfVolumesInnerAllOfStorageos model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfStorageos
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfStorageos {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfStorageos</code>.
     * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfStorageos
     */
    constructor() { 
        
        PodSpecAllOfVolumesInnerAllOfStorageos.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfStorageos</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfStorageos} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfStorageos} The populated <code>PodSpecAllOfVolumesInnerAllOfStorageos</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfStorageos();

            if (data.hasOwnProperty('fsType')) {
                obj['fsType'] = ApiClient.convertToType(data['fsType'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('secretRef')) {
                obj['secretRef'] = PodSpecAllOfVolumesInnerAllOfStorageosAllOfSecretRef.constructFromObject(data['secretRef']);
            }
            if (data.hasOwnProperty('volumeName')) {
                obj['volumeName'] = ApiClient.convertToType(data['volumeName'], 'String');
            }
            if (data.hasOwnProperty('volumeNamespace')) {
                obj['volumeNamespace'] = ApiClient.convertToType(data['volumeNamespace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfStorageos</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfStorageos</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fsType'] && !(typeof data['fsType'] === 'string' || data['fsType'] instanceof String)) {
            throw new Error("Expected the field `fsType` to be a primitive type in the JSON string but got " + data['fsType']);
        }
        // validate the optional field `secretRef`
        if (data['secretRef']) { // data not null
          PodSpecAllOfVolumesInnerAllOfStorageosAllOfSecretRef.validateJSON(data['secretRef']);
        }
        // ensure the json data is a string
        if (data['volumeName'] && !(typeof data['volumeName'] === 'string' || data['volumeName'] instanceof String)) {
            throw new Error("Expected the field `volumeName` to be a primitive type in the JSON string but got " + data['volumeName']);
        }
        // ensure the json data is a string
        if (data['volumeNamespace'] && !(typeof data['volumeNamespace'] === 'string' || data['volumeNamespace'] instanceof String)) {
            throw new Error("Expected the field `volumeNamespace` to be a primitive type in the JSON string but got " + data['volumeNamespace']);
        }

        return true;
    }


}



/**
 * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
 * @member {String} fsType
 */
PodSpecAllOfVolumesInnerAllOfStorageos.prototype['fsType'] = undefined;

/**
 * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
 * @member {Boolean} readOnly
 */
PodSpecAllOfVolumesInnerAllOfStorageos.prototype['readOnly'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfStorageosAllOfSecretRef} secretRef
 */
PodSpecAllOfVolumesInnerAllOfStorageos.prototype['secretRef'] = undefined;

/**
 * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
 * @member {String} volumeName
 */
PodSpecAllOfVolumesInnerAllOfStorageos.prototype['volumeName'] = undefined;

/**
 * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
 * @member {String} volumeNamespace
 */
PodSpecAllOfVolumesInnerAllOfStorageos.prototype['volumeNamespace'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfStorageos;

