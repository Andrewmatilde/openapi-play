/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate from './PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate';

/**
 * The PodSpecAllOfVolumesInnerAllOfEphemeral model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfEphemeral
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfEphemeral {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfEphemeral</code>.
     * ephemeral represents a volume that is handled by a cluster storage driver. The volume&#39;s lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfEphemeral
     */
    constructor() { 
        
        PodSpecAllOfVolumesInnerAllOfEphemeral.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfEphemeral</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfEphemeral} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfEphemeral} The populated <code>PodSpecAllOfVolumesInnerAllOfEphemeral</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfEphemeral();

            if (data.hasOwnProperty('volumeClaimTemplate')) {
                obj['volumeClaimTemplate'] = PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate.constructFromObject(data['volumeClaimTemplate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeral</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeral</code>.
     */
    static validateJSON(data) {
        // validate the optional field `volumeClaimTemplate`
        if (data['volumeClaimTemplate']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate.validateJSON(data['volumeClaimTemplate']);
        }

        return true;
    }


}



/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate} volumeClaimTemplate
 */
PodSpecAllOfVolumesInnerAllOfEphemeral.prototype['volumeClaimTemplate'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfEphemeral;

