/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSource from './PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSource';
import PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef from './PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef';
import PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfResources from './PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfResources';
import PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfSelector from './PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfSelector';

/**
 * The PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec</code>.
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec
     */
    constructor() { 
        
        PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec} The populated <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec();

            if (data.hasOwnProperty('accessModes')) {
                obj['accessModes'] = ApiClient.convertToType(data['accessModes'], ['String']);
            }
            if (data.hasOwnProperty('dataSource')) {
                obj['dataSource'] = PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSource.constructFromObject(data['dataSource']);
            }
            if (data.hasOwnProperty('dataSourceRef')) {
                obj['dataSourceRef'] = PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.constructFromObject(data['dataSourceRef']);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfResources.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfSelector.constructFromObject(data['selector']);
            }
            if (data.hasOwnProperty('storageClassName')) {
                obj['storageClassName'] = ApiClient.convertToType(data['storageClassName'], 'String');
            }
            if (data.hasOwnProperty('volumeAttributesClassName')) {
                obj['volumeAttributesClassName'] = ApiClient.convertToType(data['volumeAttributesClassName'], 'String');
            }
            if (data.hasOwnProperty('volumeMode')) {
                obj['volumeMode'] = ApiClient.convertToType(data['volumeMode'], 'String');
            }
            if (data.hasOwnProperty('volumeName')) {
                obj['volumeName'] = ApiClient.convertToType(data['volumeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accessModes'])) {
            throw new Error("Expected the field `accessModes` to be an array in the JSON data but got " + data['accessModes']);
        }
        // validate the optional field `dataSource`
        if (data['dataSource']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSource.validateJSON(data['dataSource']);
        }
        // validate the optional field `dataSourceRef`
        if (data['dataSourceRef']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef.validateJSON(data['dataSourceRef']);
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfResources.validateJSON(data['resources']);
        }
        // validate the optional field `selector`
        if (data['selector']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfSelector.validateJSON(data['selector']);
        }
        // ensure the json data is a string
        if (data['storageClassName'] && !(typeof data['storageClassName'] === 'string' || data['storageClassName'] instanceof String)) {
            throw new Error("Expected the field `storageClassName` to be a primitive type in the JSON string but got " + data['storageClassName']);
        }
        // ensure the json data is a string
        if (data['volumeAttributesClassName'] && !(typeof data['volumeAttributesClassName'] === 'string' || data['volumeAttributesClassName'] instanceof String)) {
            throw new Error("Expected the field `volumeAttributesClassName` to be a primitive type in the JSON string but got " + data['volumeAttributesClassName']);
        }
        // ensure the json data is a string
        if (data['volumeMode'] && !(typeof data['volumeMode'] === 'string' || data['volumeMode'] instanceof String)) {
            throw new Error("Expected the field `volumeMode` to be a primitive type in the JSON string but got " + data['volumeMode']);
        }
        // ensure the json data is a string
        if (data['volumeName'] && !(typeof data['volumeName'] === 'string' || data['volumeName'] instanceof String)) {
            throw new Error("Expected the field `volumeName` to be a primitive type in the JSON string but got " + data['volumeName']);
        }

        return true;
    }


}



/**
 * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
 * @member {Array.<String>} accessModes
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['accessModes'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSource} dataSource
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['dataSource'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfDataSourceRef} dataSourceRef
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['dataSourceRef'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfResources} resources
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['resources'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpecAllOfSelector} selector
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['selector'] = undefined;

/**
 * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
 * @member {String} storageClassName
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['storageClassName'] = undefined;

/**
 * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
 * @member {String} volumeAttributesClassName
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['volumeAttributesClassName'] = undefined;

/**
 * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
 * @member {String} volumeMode
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['volumeMode'] = undefined;

/**
 * volumeName is the binding reference to the PersistentVolume backing this claim.
 * @member {String} volumeName
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.prototype['volumeName'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec;

