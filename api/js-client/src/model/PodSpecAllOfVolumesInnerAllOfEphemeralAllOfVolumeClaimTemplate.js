/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfMetadata from './PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfMetadata';
import PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec from './PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec';

/**
 * The PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate model module.
 * @module model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate</code>.
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be &#x60;&lt;pod name&gt;-&lt;volume name&gt;&#x60; where &#x60;&lt;volume name&gt;&#x60; is the name from the &#x60;PodSpec.Volumes&#x60; array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.  Required, must not be nil.
     * @alias module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate
     * @param spec {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec} 
     */
    constructor(spec) { 
        
        PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate.initialize(this, spec);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, spec) { 
        obj['spec'] = spec;
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate} The populated <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.constructFromObject(data['spec']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `spec`
        if (data['spec']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec.validateJSON(data['spec']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate.RequiredProperties = ["spec"];

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfMetadata} metadata
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate.prototype['metadata'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplateAllOfSpec} spec
 */
PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate.prototype['spec'] = undefined;






export default PodSpecAllOfVolumesInnerAllOfEphemeralAllOfVolumeClaimTemplate;

