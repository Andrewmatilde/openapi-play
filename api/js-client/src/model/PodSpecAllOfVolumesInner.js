/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodSpecAllOfVolumesInnerAllOfAwsElasticBlockStore from './PodSpecAllOfVolumesInnerAllOfAwsElasticBlockStore';
import PodSpecAllOfVolumesInnerAllOfAzureDisk from './PodSpecAllOfVolumesInnerAllOfAzureDisk';
import PodSpecAllOfVolumesInnerAllOfAzureFile from './PodSpecAllOfVolumesInnerAllOfAzureFile';
import PodSpecAllOfVolumesInnerAllOfCephfs from './PodSpecAllOfVolumesInnerAllOfCephfs';
import PodSpecAllOfVolumesInnerAllOfCinder from './PodSpecAllOfVolumesInnerAllOfCinder';
import PodSpecAllOfVolumesInnerAllOfConfigMap from './PodSpecAllOfVolumesInnerAllOfConfigMap';
import PodSpecAllOfVolumesInnerAllOfCsi from './PodSpecAllOfVolumesInnerAllOfCsi';
import PodSpecAllOfVolumesInnerAllOfDownwardAPI from './PodSpecAllOfVolumesInnerAllOfDownwardAPI';
import PodSpecAllOfVolumesInnerAllOfEmptyDir from './PodSpecAllOfVolumesInnerAllOfEmptyDir';
import PodSpecAllOfVolumesInnerAllOfEphemeral from './PodSpecAllOfVolumesInnerAllOfEphemeral';
import PodSpecAllOfVolumesInnerAllOfFc from './PodSpecAllOfVolumesInnerAllOfFc';
import PodSpecAllOfVolumesInnerAllOfFlexVolume from './PodSpecAllOfVolumesInnerAllOfFlexVolume';
import PodSpecAllOfVolumesInnerAllOfFlocker from './PodSpecAllOfVolumesInnerAllOfFlocker';
import PodSpecAllOfVolumesInnerAllOfGcePersistentDisk from './PodSpecAllOfVolumesInnerAllOfGcePersistentDisk';
import PodSpecAllOfVolumesInnerAllOfGitRepo from './PodSpecAllOfVolumesInnerAllOfGitRepo';
import PodSpecAllOfVolumesInnerAllOfGlusterfs from './PodSpecAllOfVolumesInnerAllOfGlusterfs';
import PodSpecAllOfVolumesInnerAllOfHostPath from './PodSpecAllOfVolumesInnerAllOfHostPath';
import PodSpecAllOfVolumesInnerAllOfImage from './PodSpecAllOfVolumesInnerAllOfImage';
import PodSpecAllOfVolumesInnerAllOfIscsi from './PodSpecAllOfVolumesInnerAllOfIscsi';
import PodSpecAllOfVolumesInnerAllOfNfs from './PodSpecAllOfVolumesInnerAllOfNfs';
import PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim from './PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim';
import PodSpecAllOfVolumesInnerAllOfPhotonPersistentDisk from './PodSpecAllOfVolumesInnerAllOfPhotonPersistentDisk';
import PodSpecAllOfVolumesInnerAllOfPortworxVolume from './PodSpecAllOfVolumesInnerAllOfPortworxVolume';
import PodSpecAllOfVolumesInnerAllOfProjected from './PodSpecAllOfVolumesInnerAllOfProjected';
import PodSpecAllOfVolumesInnerAllOfQuobyte from './PodSpecAllOfVolumesInnerAllOfQuobyte';
import PodSpecAllOfVolumesInnerAllOfRbd from './PodSpecAllOfVolumesInnerAllOfRbd';
import PodSpecAllOfVolumesInnerAllOfScaleIO from './PodSpecAllOfVolumesInnerAllOfScaleIO';
import PodSpecAllOfVolumesInnerAllOfSecret from './PodSpecAllOfVolumesInnerAllOfSecret';
import PodSpecAllOfVolumesInnerAllOfStorageos from './PodSpecAllOfVolumesInnerAllOfStorageos';
import PodSpecAllOfVolumesInnerAllOfVsphereVolume from './PodSpecAllOfVolumesInnerAllOfVsphereVolume';

/**
 * The PodSpecAllOfVolumesInner model module.
 * @module model/PodSpecAllOfVolumesInner
 * @version 1.0.0
 */
class PodSpecAllOfVolumesInner {
    /**
     * Constructs a new <code>PodSpecAllOfVolumesInner</code>.
     * @alias module:model/PodSpecAllOfVolumesInner
     * @param name {String} name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    constructor(name) { 
        
        PodSpecAllOfVolumesInner.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name || '';
    }

    /**
     * Constructs a <code>PodSpecAllOfVolumesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodSpecAllOfVolumesInner} obj Optional instance to populate.
     * @return {module:model/PodSpecAllOfVolumesInner} The populated <code>PodSpecAllOfVolumesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodSpecAllOfVolumesInner();

            if (data.hasOwnProperty('awsElasticBlockStore')) {
                obj['awsElasticBlockStore'] = PodSpecAllOfVolumesInnerAllOfAwsElasticBlockStore.constructFromObject(data['awsElasticBlockStore']);
            }
            if (data.hasOwnProperty('azureDisk')) {
                obj['azureDisk'] = PodSpecAllOfVolumesInnerAllOfAzureDisk.constructFromObject(data['azureDisk']);
            }
            if (data.hasOwnProperty('azureFile')) {
                obj['azureFile'] = PodSpecAllOfVolumesInnerAllOfAzureFile.constructFromObject(data['azureFile']);
            }
            if (data.hasOwnProperty('cephfs')) {
                obj['cephfs'] = PodSpecAllOfVolumesInnerAllOfCephfs.constructFromObject(data['cephfs']);
            }
            if (data.hasOwnProperty('cinder')) {
                obj['cinder'] = PodSpecAllOfVolumesInnerAllOfCinder.constructFromObject(data['cinder']);
            }
            if (data.hasOwnProperty('configMap')) {
                obj['configMap'] = PodSpecAllOfVolumesInnerAllOfConfigMap.constructFromObject(data['configMap']);
            }
            if (data.hasOwnProperty('csi')) {
                obj['csi'] = PodSpecAllOfVolumesInnerAllOfCsi.constructFromObject(data['csi']);
            }
            if (data.hasOwnProperty('downwardAPI')) {
                obj['downwardAPI'] = PodSpecAllOfVolumesInnerAllOfDownwardAPI.constructFromObject(data['downwardAPI']);
            }
            if (data.hasOwnProperty('emptyDir')) {
                obj['emptyDir'] = PodSpecAllOfVolumesInnerAllOfEmptyDir.constructFromObject(data['emptyDir']);
            }
            if (data.hasOwnProperty('ephemeral')) {
                obj['ephemeral'] = PodSpecAllOfVolumesInnerAllOfEphemeral.constructFromObject(data['ephemeral']);
            }
            if (data.hasOwnProperty('fc')) {
                obj['fc'] = PodSpecAllOfVolumesInnerAllOfFc.constructFromObject(data['fc']);
            }
            if (data.hasOwnProperty('flexVolume')) {
                obj['flexVolume'] = PodSpecAllOfVolumesInnerAllOfFlexVolume.constructFromObject(data['flexVolume']);
            }
            if (data.hasOwnProperty('flocker')) {
                obj['flocker'] = PodSpecAllOfVolumesInnerAllOfFlocker.constructFromObject(data['flocker']);
            }
            if (data.hasOwnProperty('gcePersistentDisk')) {
                obj['gcePersistentDisk'] = PodSpecAllOfVolumesInnerAllOfGcePersistentDisk.constructFromObject(data['gcePersistentDisk']);
            }
            if (data.hasOwnProperty('gitRepo')) {
                obj['gitRepo'] = PodSpecAllOfVolumesInnerAllOfGitRepo.constructFromObject(data['gitRepo']);
            }
            if (data.hasOwnProperty('glusterfs')) {
                obj['glusterfs'] = PodSpecAllOfVolumesInnerAllOfGlusterfs.constructFromObject(data['glusterfs']);
            }
            if (data.hasOwnProperty('hostPath')) {
                obj['hostPath'] = PodSpecAllOfVolumesInnerAllOfHostPath.constructFromObject(data['hostPath']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = PodSpecAllOfVolumesInnerAllOfImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('iscsi')) {
                obj['iscsi'] = PodSpecAllOfVolumesInnerAllOfIscsi.constructFromObject(data['iscsi']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfs')) {
                obj['nfs'] = PodSpecAllOfVolumesInnerAllOfNfs.constructFromObject(data['nfs']);
            }
            if (data.hasOwnProperty('persistentVolumeClaim')) {
                obj['persistentVolumeClaim'] = PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim.constructFromObject(data['persistentVolumeClaim']);
            }
            if (data.hasOwnProperty('photonPersistentDisk')) {
                obj['photonPersistentDisk'] = PodSpecAllOfVolumesInnerAllOfPhotonPersistentDisk.constructFromObject(data['photonPersistentDisk']);
            }
            if (data.hasOwnProperty('portworxVolume')) {
                obj['portworxVolume'] = PodSpecAllOfVolumesInnerAllOfPortworxVolume.constructFromObject(data['portworxVolume']);
            }
            if (data.hasOwnProperty('projected')) {
                obj['projected'] = PodSpecAllOfVolumesInnerAllOfProjected.constructFromObject(data['projected']);
            }
            if (data.hasOwnProperty('quobyte')) {
                obj['quobyte'] = PodSpecAllOfVolumesInnerAllOfQuobyte.constructFromObject(data['quobyte']);
            }
            if (data.hasOwnProperty('rbd')) {
                obj['rbd'] = PodSpecAllOfVolumesInnerAllOfRbd.constructFromObject(data['rbd']);
            }
            if (data.hasOwnProperty('scaleIO')) {
                obj['scaleIO'] = PodSpecAllOfVolumesInnerAllOfScaleIO.constructFromObject(data['scaleIO']);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = PodSpecAllOfVolumesInnerAllOfSecret.constructFromObject(data['secret']);
            }
            if (data.hasOwnProperty('storageos')) {
                obj['storageos'] = PodSpecAllOfVolumesInnerAllOfStorageos.constructFromObject(data['storageos']);
            }
            if (data.hasOwnProperty('vsphereVolume')) {
                obj['vsphereVolume'] = PodSpecAllOfVolumesInnerAllOfVsphereVolume.constructFromObject(data['vsphereVolume']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodSpecAllOfVolumesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodSpecAllOfVolumesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodSpecAllOfVolumesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `awsElasticBlockStore`
        if (data['awsElasticBlockStore']) { // data not null
          PodSpecAllOfVolumesInnerAllOfAwsElasticBlockStore.validateJSON(data['awsElasticBlockStore']);
        }
        // validate the optional field `azureDisk`
        if (data['azureDisk']) { // data not null
          PodSpecAllOfVolumesInnerAllOfAzureDisk.validateJSON(data['azureDisk']);
        }
        // validate the optional field `azureFile`
        if (data['azureFile']) { // data not null
          PodSpecAllOfVolumesInnerAllOfAzureFile.validateJSON(data['azureFile']);
        }
        // validate the optional field `cephfs`
        if (data['cephfs']) { // data not null
          PodSpecAllOfVolumesInnerAllOfCephfs.validateJSON(data['cephfs']);
        }
        // validate the optional field `cinder`
        if (data['cinder']) { // data not null
          PodSpecAllOfVolumesInnerAllOfCinder.validateJSON(data['cinder']);
        }
        // validate the optional field `configMap`
        if (data['configMap']) { // data not null
          PodSpecAllOfVolumesInnerAllOfConfigMap.validateJSON(data['configMap']);
        }
        // validate the optional field `csi`
        if (data['csi']) { // data not null
          PodSpecAllOfVolumesInnerAllOfCsi.validateJSON(data['csi']);
        }
        // validate the optional field `downwardAPI`
        if (data['downwardAPI']) { // data not null
          PodSpecAllOfVolumesInnerAllOfDownwardAPI.validateJSON(data['downwardAPI']);
        }
        // validate the optional field `emptyDir`
        if (data['emptyDir']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEmptyDir.validateJSON(data['emptyDir']);
        }
        // validate the optional field `ephemeral`
        if (data['ephemeral']) { // data not null
          PodSpecAllOfVolumesInnerAllOfEphemeral.validateJSON(data['ephemeral']);
        }
        // validate the optional field `fc`
        if (data['fc']) { // data not null
          PodSpecAllOfVolumesInnerAllOfFc.validateJSON(data['fc']);
        }
        // validate the optional field `flexVolume`
        if (data['flexVolume']) { // data not null
          PodSpecAllOfVolumesInnerAllOfFlexVolume.validateJSON(data['flexVolume']);
        }
        // validate the optional field `flocker`
        if (data['flocker']) { // data not null
          PodSpecAllOfVolumesInnerAllOfFlocker.validateJSON(data['flocker']);
        }
        // validate the optional field `gcePersistentDisk`
        if (data['gcePersistentDisk']) { // data not null
          PodSpecAllOfVolumesInnerAllOfGcePersistentDisk.validateJSON(data['gcePersistentDisk']);
        }
        // validate the optional field `gitRepo`
        if (data['gitRepo']) { // data not null
          PodSpecAllOfVolumesInnerAllOfGitRepo.validateJSON(data['gitRepo']);
        }
        // validate the optional field `glusterfs`
        if (data['glusterfs']) { // data not null
          PodSpecAllOfVolumesInnerAllOfGlusterfs.validateJSON(data['glusterfs']);
        }
        // validate the optional field `hostPath`
        if (data['hostPath']) { // data not null
          PodSpecAllOfVolumesInnerAllOfHostPath.validateJSON(data['hostPath']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          PodSpecAllOfVolumesInnerAllOfImage.validateJSON(data['image']);
        }
        // validate the optional field `iscsi`
        if (data['iscsi']) { // data not null
          PodSpecAllOfVolumesInnerAllOfIscsi.validateJSON(data['iscsi']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nfs`
        if (data['nfs']) { // data not null
          PodSpecAllOfVolumesInnerAllOfNfs.validateJSON(data['nfs']);
        }
        // validate the optional field `persistentVolumeClaim`
        if (data['persistentVolumeClaim']) { // data not null
          PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim.validateJSON(data['persistentVolumeClaim']);
        }
        // validate the optional field `photonPersistentDisk`
        if (data['photonPersistentDisk']) { // data not null
          PodSpecAllOfVolumesInnerAllOfPhotonPersistentDisk.validateJSON(data['photonPersistentDisk']);
        }
        // validate the optional field `portworxVolume`
        if (data['portworxVolume']) { // data not null
          PodSpecAllOfVolumesInnerAllOfPortworxVolume.validateJSON(data['portworxVolume']);
        }
        // validate the optional field `projected`
        if (data['projected']) { // data not null
          PodSpecAllOfVolumesInnerAllOfProjected.validateJSON(data['projected']);
        }
        // validate the optional field `quobyte`
        if (data['quobyte']) { // data not null
          PodSpecAllOfVolumesInnerAllOfQuobyte.validateJSON(data['quobyte']);
        }
        // validate the optional field `rbd`
        if (data['rbd']) { // data not null
          PodSpecAllOfVolumesInnerAllOfRbd.validateJSON(data['rbd']);
        }
        // validate the optional field `scaleIO`
        if (data['scaleIO']) { // data not null
          PodSpecAllOfVolumesInnerAllOfScaleIO.validateJSON(data['scaleIO']);
        }
        // validate the optional field `secret`
        if (data['secret']) { // data not null
          PodSpecAllOfVolumesInnerAllOfSecret.validateJSON(data['secret']);
        }
        // validate the optional field `storageos`
        if (data['storageos']) { // data not null
          PodSpecAllOfVolumesInnerAllOfStorageos.validateJSON(data['storageos']);
        }
        // validate the optional field `vsphereVolume`
        if (data['vsphereVolume']) { // data not null
          PodSpecAllOfVolumesInnerAllOfVsphereVolume.validateJSON(data['vsphereVolume']);
        }

        return true;
    }


}

PodSpecAllOfVolumesInner.RequiredProperties = ["name"];

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfAwsElasticBlockStore} awsElasticBlockStore
 */
PodSpecAllOfVolumesInner.prototype['awsElasticBlockStore'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfAzureDisk} azureDisk
 */
PodSpecAllOfVolumesInner.prototype['azureDisk'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfAzureFile} azureFile
 */
PodSpecAllOfVolumesInner.prototype['azureFile'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfCephfs} cephfs
 */
PodSpecAllOfVolumesInner.prototype['cephfs'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfCinder} cinder
 */
PodSpecAllOfVolumesInner.prototype['cinder'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfConfigMap} configMap
 */
PodSpecAllOfVolumesInner.prototype['configMap'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfCsi} csi
 */
PodSpecAllOfVolumesInner.prototype['csi'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfDownwardAPI} downwardAPI
 */
PodSpecAllOfVolumesInner.prototype['downwardAPI'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEmptyDir} emptyDir
 */
PodSpecAllOfVolumesInner.prototype['emptyDir'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfEphemeral} ephemeral
 */
PodSpecAllOfVolumesInner.prototype['ephemeral'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfFc} fc
 */
PodSpecAllOfVolumesInner.prototype['fc'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfFlexVolume} flexVolume
 */
PodSpecAllOfVolumesInner.prototype['flexVolume'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfFlocker} flocker
 */
PodSpecAllOfVolumesInner.prototype['flocker'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfGcePersistentDisk} gcePersistentDisk
 */
PodSpecAllOfVolumesInner.prototype['gcePersistentDisk'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfGitRepo} gitRepo
 */
PodSpecAllOfVolumesInner.prototype['gitRepo'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfGlusterfs} glusterfs
 */
PodSpecAllOfVolumesInner.prototype['glusterfs'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfHostPath} hostPath
 */
PodSpecAllOfVolumesInner.prototype['hostPath'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfImage} image
 */
PodSpecAllOfVolumesInner.prototype['image'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfIscsi} iscsi
 */
PodSpecAllOfVolumesInner.prototype['iscsi'] = undefined;

/**
 * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
 * @member {String} name
 * @default ''
 */
PodSpecAllOfVolumesInner.prototype['name'] = '';

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfNfs} nfs
 */
PodSpecAllOfVolumesInner.prototype['nfs'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfPersistentVolumeClaim} persistentVolumeClaim
 */
PodSpecAllOfVolumesInner.prototype['persistentVolumeClaim'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfPhotonPersistentDisk} photonPersistentDisk
 */
PodSpecAllOfVolumesInner.prototype['photonPersistentDisk'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfPortworxVolume} portworxVolume
 */
PodSpecAllOfVolumesInner.prototype['portworxVolume'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfProjected} projected
 */
PodSpecAllOfVolumesInner.prototype['projected'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfQuobyte} quobyte
 */
PodSpecAllOfVolumesInner.prototype['quobyte'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfRbd} rbd
 */
PodSpecAllOfVolumesInner.prototype['rbd'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfScaleIO} scaleIO
 */
PodSpecAllOfVolumesInner.prototype['scaleIO'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfSecret} secret
 */
PodSpecAllOfVolumesInner.prototype['secret'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfStorageos} storageos
 */
PodSpecAllOfVolumesInner.prototype['storageos'] = undefined;

/**
 * @member {module:model/PodSpecAllOfVolumesInnerAllOfVsphereVolume} vsphereVolume
 */
PodSpecAllOfVolumesInner.prototype['vsphereVolume'] = undefined;






export default PodSpecAllOfVolumesInner;

