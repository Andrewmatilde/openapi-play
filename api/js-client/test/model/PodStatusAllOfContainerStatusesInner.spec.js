/**
 * K8S Resource API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.K8SResourceApi);
  }
}(this, function(expect, K8SResourceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PodStatusAllOfContainerStatusesInner', function() {
    it('should create an instance of PodStatusAllOfContainerStatusesInner', function() {
      // uncomment below and update the code to test PodStatusAllOfContainerStatusesInner
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be.a(K8SResourceApi.PodStatusAllOfContainerStatusesInner);
    });

    it('should have the property allocatedResources (base name: "allocatedResources")', function() {
      // uncomment below and update the code to test the property allocatedResources
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property allocatedResourcesStatus (base name: "allocatedResourcesStatus")', function() {
      // uncomment below and update the code to test the property allocatedResourcesStatus
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property containerID (base name: "containerID")', function() {
      // uncomment below and update the code to test the property containerID
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property imageID (base name: "imageID")', function() {
      // uncomment below and update the code to test the property imageID
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property lastState (base name: "lastState")', function() {
      // uncomment below and update the code to test the property lastState
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property ready (base name: "ready")', function() {
      // uncomment below and update the code to test the property ready
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property resources (base name: "resources")', function() {
      // uncomment below and update the code to test the property resources
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property restartCount (base name: "restartCount")', function() {
      // uncomment below and update the code to test the property restartCount
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property started (base name: "started")', function() {
      // uncomment below and update the code to test the property started
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property stopSignal (base name: "stopSignal")', function() {
      // uncomment below and update the code to test the property stopSignal
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

    it('should have the property volumeMounts (base name: "volumeMounts")', function() {
      // uncomment below and update the code to test the property volumeMounts
      //var instance = new K8SResourceApi.PodStatusAllOfContainerStatusesInner();
      //expect(instance).to.be();
    });

  });

}));
